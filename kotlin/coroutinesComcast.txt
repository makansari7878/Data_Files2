
fun main() {

    println("main is started on ${Thread.currentThread().name}")

    thread {
        println("worker thread started on ${Thread.currentThread().name}")
        Thread.sleep(3000)
        println("worker thread stopped on ${Thread.currentThread().name}")
    }

    thread {
        println("worker1 thread started on ${Thread.currentThread().name}")
        Thread.sleep(3000)
        println("worker1 thread stopped on ${Thread.currentThread().name}")
    }

    println("main is stopped on ${Thread.currentThread().name}")

}

-------------------------------------

Launch

runBlocking

Async

---------------------

fun main() {

    println("main is started on ${Thread.currentThread().name}")

   GlobalScope.launch {
       println("coroutine started on ${Thread.currentThread().name}")

       Thread.sleep(2000)
       println("coroutine stopped on ${Thread.currentThread().name}")
   }
    Thread.sleep(3000)

    println("main is stopped on ${Thread.currentThread().name}")




}
-------------------------------------



fun main() {
    println("main is started on ${Thread.currentThread().name}")

   GlobalScope.launch {
       println("coroutine started on ${Thread.currentThread().name}")
       delay(2000)
       println("coroutine stopped on ${Thread.currentThread().name}")
   }
    runBlocking {
        delay(3000)
    }
    

    println("main is stopped on ${Thread.currentThread().name}")

---------------------------

suspend function

fun main() = runBlocking {
    println("main is started on ${Thread.currentThread().name}")

   GlobalScope.launch {
       println("coroutine started on ${Thread.currentThread().name}")
       stopTime(2000)
       println("coroutine stopped on ${Thread.currentThread().name}")
   }
    delay(3000)
    println("main is stopped on ${Thread.currentThread().name}")
}

suspend fun stopTime(time : Long){
    delay(time)
}

---------------------------



fun main() = runBlocking {
    println("main is started on ${Thread.currentThread().name}")

   var job : Job = GlobalScope.launch {
       println("coroutine started on ${Thread.currentThread().name}")
       stopTime(2000)
       println("coroutine stopped on ${Thread.currentThread().name}")
   }
    job.join()
    
    println("main is stopped on ${Thread.currentThread().name}")


---------------------------




fun main() = runBlocking {
    println("main is started on ${Thread.currentThread().name}")

   var defJob : Deferred<Unit> = GlobalScope.async {
       println("coroutine started on ${Thread.currentThread().name}")
       stopTime(2000)
       println("coroutine stopped on ${Thread.currentThread().name}")
       "RECEIVED DATA FROM SERVER"
   }
    var res = defJob.await()
    println(res)
    
    println("main is stopped on ${Thread.currentThread().name}")
}

suspend fun stopTime(time : Long){
    delay(time)
}


---------------------------



fun main() = runBlocking {
    println("main is started on ${Thread.currentThread().name}")

   var job : Job = GlobalScope.launch {
       println("coroutine started on ${Thread.currentThread().name}")

       for(i in 1..10){
           println(i)
           delay(1000)
       }

   }
    delay(5000)
    job.cancelAndJoin()
//    job.cancel()
//    job.join()

    println("main is stopped on ${Thread.currentThread().name}")
}

suspend fun stopTime(time : Long){
    delay(time)
}
---------------------------

fun main() = runBlocking {
    println("main is started on ${Thread.currentThread().name}")

   var job : Job = GlobalScope.launch {
       println("coroutine started on ${Thread.currentThread().name}")

       withTimeout(5000){
           for(i in 1..10){
               println(i)
               delay(1000)
           }
       }
   }

job.join()

    println("main is stopped on ${Thread.currentThread().name}")
}

suspend fun stopTime(time : Long){
    delay(time)
}

---------------------------


fun main() = runBlocking {
    println("main is started on ${Thread.currentThread().name}")

    println("runblocking -- $this")

    GlobalScope.launch {
        println("launch -- $this")
    }
    GlobalScope.async {
        println("async --  $this")
    }




    println("main is stopped on ${Thread.currentThread().name}")
}

---------------------------------











}









